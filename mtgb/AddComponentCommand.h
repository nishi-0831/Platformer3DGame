#pragma once
#include "Command.h"
#include "IComponentMemento.h"
#include "Entity.h"
#include "ComponentFactory.h"
#include <typeindex>

namespace mtgb
{
	/// <summary>
	/// コンポーネント追加コマンド
	/// </summary>
	class AddComponentCommand : public Command
	{
	public:
		/// <summary>
		/// コンポーネント追加コマンド
		/// </summary>
		/// <param name="_entityId">エンティティのID</param>
		/// <param name="_typeIdx">コンポーネントの型情報</param>
		/// <param name="_memento"> nullの場合は_entityIdから既存のコンポーネントを取得、なければ新規作成しMementoに保存する</param>
		/// <param name="_pComponentFactory"> 参照として保持するので、コマンドより長く生存する必要あり </param>
		AddComponentCommand(
			EntityId _entityId,
			const std::type_index& _typeIdx,
			IComponentMemento* _memento,
			const ComponentFactory& _pComponentFactory);
		~AddComponentCommand() = default;
		void Execute() override;
		void Undo() override;
		
		std::string Name() const override;
	private:
		EntityId entityId_;
		std::type_index componentType_;
		IComponentMemento* memento_;

		// ComponentFactoryがnullであることを許容しない
		const ComponentFactory& pComponentFactory_;

		
		void ApplyMemento();
		void RemoveComponent() const;

		// Command を介して継承されました
	};
}